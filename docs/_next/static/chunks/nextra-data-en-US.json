{"/architecture":{"title":"Tableau Embedded Analytics Playbook","data":{"":"Embedding Tableau content allows you to add the power of interactive visualization to external applications. Common use cases of embedding are:\nTableau dashboards as components of line-of-business or vertical applications\nEmbedding into internal knowledge bases and CRM systems\nAdding interactive visualizations to blog posts\nEmbedding into custom mobile applications\nThe act of embedding a single dashboard or visualization into a single webpage is quite simple, but a well-engineered integration requires handling other things such as authentication, authorization, content management, and performance. Depending on your integration goals, you may require the use of a variety of features and techniques.The following list provides a summary of the key APIs and features that are used in embedded deployments. The rest of the playbook will then dive into the key embedding requirements, explain how to accomplish those requirements, and supply you with resources necessary to get up and running.","key-features-and-apis#Key features and APIs":"Embedding API v3 - The Embedding API v3 provides an updated developer experience and enhancements over the JavaScript API v2. The Embedding API v3 provides web components for embedding Tableau visualizations and is available starting with Tableau version 2021.4.REST API - Allows for integration between an embedding application and Tableau Server or Tableau Online by way of RESTful endpoints that manage users, content, and permissions amongst many other capabilities provided by the Tableau platform. Common use-cases include integrating user management in Tableau with user management in the embedding application, managing content and permissions according to the state of the embedding application, querying Tableau metadata so the correct information is displayed to end-users, and automating the management of Tableau Server.Connected Apps - Enables a seamless and secure authentication experience by facilitating an explicit trust relationship between Tableau Online or Tableau Server and external applications where Tableau content is embedded. The trust relationship is established and verified through an authentication token in the JSON Web Token (JWT) standard, which uses a shared secret provided by the Tableau connected app and signed by your external application.NOTE: Connected Apps is available for both Tableau Server and Tableau Online using the Embedding API v3.External Authorization Servers (EAS) - Establishes a trust relationship between Tableau Server and the EAS. By establishing a trust relationship, you’re able to provide your users a single sign-on (SSO) experience to Tableau content embedded in your external applications through the identity provider (IdP) you’ve already configured for Tableau Server. When embedded Tableau content is loaded in your custom application, a standard OAuth flow is used. After users successfully sign in to the IdP, they are then automatically signed in to Tableau Server. To register an EAS with Tableau Server, you must have an EAS already configured. In addition, the EAS must send a valid JSON web token (JWT).NOTE: EAS is only available for Tableau Server and the Embedding API v3.SAML, OpenID, Active Directory, Kerberos - For environments that already use one of these systems, they can be leveraged to achieve Single Sign-On (and to leverage database security in the case of Kerberos).Tableau Viz Lightning web component - Makes it easy to Embed Tableau views into Salesforce Lightning pages. The Tableau Viz Lightning web component is available from the Salesforce AppExchange. To embed a view, you simply drag and drop the Tableau Viz Lightning web component onto the page and then provide the URL for the Tableau view. You can embed Tableau views from Tableau Server, Tableau Online, or Tableau Public.Mobile App Bootstrap - Samples/Templates for embedding in mobile apps. A great way to get up and running if you have mobile apps and want to include Tableau content or if you want a customized mobile experience for Tableau.Document API - API for updating data source connection information. Allows you to build content once (i.e. templates) in the scenario that you have many, structurally similar, databases for multi-tenancy or dev/test/prod scenarios.User Filtering - Functionality for securely filtering a workbook based on the Tableau Server or Online login information. In multi-tenant scenarios, if you have a single database for multiple users or clients, you can use user filters to have the same content apply to the different clients, ensuring each user can only see the rows that he or she has access to."}},"/backend/restapi":{"title":"User Management, Content Management, and Display with the REST API","data":{"":"Embedding a single visualization with the Embedding API v3 or JavaScript API v2 and enabling single sign-on is a crucial first step, but is only part of the story when building scaled solutions that use Tableau content as components. You often will have to use the REST API to integrate the users and content between your system and Tableau Server.The REST API allows you to query and manage sites, users, groups, workbooks, data sources, projects, and subscriptions/schedules. The automation and integration use cases are effectively infinite, but the most common workflows it is used for in embedded analytics are:\nUser creation to sync with the users in the embedding application\nDynamic display of workbooks and data sources that a user has access to\nPublishing workbooks as the last step in a content-integration workflow\nBecause the REST API is called via HTTP, you can use whichever programming language is most appropriate. However, there is also the Server Client Library which simplifies the code required. The Server Client Library is currently only available in Python.Most commonly, you will make REST API calls from your web application's server-side code. In some cases, you will want to make those calls client-side (for example, if you are building web pages with no control over the Server-side logic). For those scenarios, Tableau Server enables CORS support.Below are high-level descriptions of the flows required to enable the most common REST API use cases, but you should read the documentation to learn how to make the individual calls. The concepts section is a good place to start and to learn about subjects such as filtering, sorting, and paginating. Also, be sure to explore the REST API samples repository.","user-creation#User Creation":"Often, your application will store users. Except in the case of syncing with Active Directory, you will need to replicate those users into Tableau Server. You will likely have a script that adds all existing users to Server as a set-up step, and some code that executes when a new user is added to your system. To add a single user to Tableau Server:\nSign in\nAdd user to site (If the user does not exist, they will be added to Tableau Server and to the site you specify)\nSign out\nThat's all there is to adding a new user, but you will likely want to make some other calls to ensure the new user has access to the correct content. For example, you may Add the user to group(s). If the group(s) you add the user to have the correct permissions for that user, that may be sufficient, but if not, you can add workbook permissions, add project permissions, or add datasource permissions.","dynamic-display-of-content#Dynamic Display of Content":"If your users have access to multiple workbooks and data sources, you will likely want to make a Table of Contents page similar to the below.\nAnd if different users have access to different sets of content, it will not make sense for the list of available content to be hard-coded. Therefore, you need to use the REST API to query the workbooks available to the logged-in user. To achieve the above, you also need to grab the thumbnails.\nSign in (as admin)\nQuery workbooks for user passing in the username of the user currently logged in to your application\nFor each workbook returned: Grab the Preview Image\nPopulate the Table of Contents with links to pages that embed the workbooks, using the preview images.\nWhen the user clicks one of the links, they are brought to a page in your application that embeds the chosen dashboard. To avoid having to hard-code these embedding pages, you will likely create a dynamic web page that can be passed the workbook name and view name so that you can construct the url for the JavaScript API v2 or the Embedding API v3 to use. The details of engineering that dynamic webpage depend on your web application and front-end framework.","publishing-workbooks#Publishing Workbooks":"The typical workflow for building and publishing content is to do it manually with Tableau Desktop. You might need to publish with the REST API for a variety of reasons. For example:\nUsing the Document API to generate workbooks from a template and then publishing each of those to Server\nCreating a script that runs on install of Server to publish a set of pre-built dashboards\nScripting migration from site to site or server to server\nDepending on the size of the workbook or data source, it may be possible to publish with a single call. If the file is large, you will need to send the file in pieces. For more details, see the documentation on publishing with the REST API\nNext section: Multi-Tenancy and Row-Level Security"}},"/backend/devops":{"title":"Development and Deployment","data":{"":"Developing content in Tableau does not require traditional source control or dev-test-prod techniques. However, you may wish to integrate the Tableau content development and deployment into your existing development systems. In this article, we specifically cover dev-test-prod and source control.","dev-test-prod#Dev-Test-Prod":"If you have a workbook that is in development or test modes and needs to be promoted to the next steps, you may have to do one or both of these things:\nPoint the workbook to a different datasource\nPromote the workbook inside Tableau Server\nTo point the workbook to a different datasource, you can use the Document API to modify the connection string of the workbook. If the workbook is already on Server, you will need to:\nUse the [REST API]({{ site.baseurl }}/pages/03_server_management_and_restapi) to download the workbook\nUse the Document API to change the connection string\nRepublish the workbook with the REST API\nThe technique for promoting inside of Tableau Server depends on whether you separate your environments with projects, with sites, or with different servers.\nTo promote from one project to another, simply use the REST API Update Workbook endpoint to change the project.To promote from one site to another:\nDownload with the REST API\n(Optional) Use the REST API to delete the workbook from the old environment\nUse the Document API to change the connection string (if necessary)\nPublish with the REST API to the new site\nTo promote from one server to another, use the site-to-site technique, but you will have to sign in to the new server with the REST API to publish.Here are some samples:\nMigrate projects using the Python Server Client Library\nMigrate sites using the Python Server Client Library\nC# tool for migrating with the REST API\nModify connection information with the Document API","source-control#Source Control":"Tableau Server has built in revision history, but you must enable it for a given site. Once enabled, it stores each published version of a workbook or data source, with full access to download or restore back to a given point. Revision history can also be accessed via the Tableau REST API, so this functionality can be integrated in with other tools you have.The Tableau content files (TDS and TWB) are XML files and thus can be easily stored in any sort of external revision control system. When you create an extract (TDE) or save a packaged workbook (TDSX or TWBX file), the files are binary and thus source control is less useful. Doing diff processes on workbook and data source files is not particularly useful, since there is no real easy way to merge changes with Tableau files, but having a check-in process to manage who is working on a workbook or data source can definitely have advantages.For a more detailed discussion of the above topics, see this blog post."}},"/frontend/embedding_api":{"title":"Embedding Tableau Views","data":{"":"The easiest method for embedding a Tableau view (dashboard or visualization) is with the copy-paste embed code. Navigate to a view on Tableau Server and copy the Embed Code from the Share toolbar option.\nOnce acquired, this code can be pasted into HTML.\nThis method is useful for simple embedding, such as embedding into blogs or internal knowledge bases, but only very simple embedding scenarios should use the embed code. Most deployments should instead use the JavaScript API v2 or the Embedding API v3. It is not significantly more work to embed with the JavaScript API v2 or the Embedding API v3, and doing so will gain you flexibility and power in your embedded deployment.","using-the-embedding-api-v3#Using the Embedding API v3":"The Tableau Embedding API v3 provides the latest iteration of embedding capabilities for the front-end of your application. It features a modern approach to initializing embedded content using web components. The Embedding API v3 provides improved security and integration capabilities through Connected Apps or with an External Authorization Server (EAS), both based on the JWT standard. The Embedding API v3 will soon support all the functionality of the JavaScript API v2, while providing future enhancements for embedding. If you are starting a new project, we recommend using this API.The basic embed code using the Embedding API v3 and the <tableau-viz> web component looks something like this:\n<!-- \nThis <script> tag links to the Embedding API library as a JavaScript ES6 module. \nTo use the library in your web application, you need to set the type attribute to \nmodule in the <script> tag. \n-->\n<!-- \nInitialize the API as part of your HTML code by using the <tableau-viz> web component. \nAfter linking to the API library, the following code is all you need to embed a Tableau view into your HTML pages.\n-->\nHere's what it looks like when you use the Embedding API v3 code to embed the viz on a web page:","join-the-tableau-developer-program#Join the Tableau Developer Program":"The Embedding API v3 is under active development and in future releases will provide full parity with the JavaScript API v2, giving you a rich set of features that you can access in your JavaScript or TypeScript code. To keep up to date with the coming features, join the Tableau Developer Program to gain access to developer previews and demos, as well as your own Tableau Online Developer site.","embedding-with-the-javascript-api-v2#Embedding with the JavaScript API v2":"The JavaScript API v2 is the established way to embed views. While the Embedding API v3 is recommended for basic embed code and for new embedding projects, you should continue to use the JavaScript API v2 for existing implementations that have a lot of customization.A basic implementation the JavaScript API v2 looks like this:HTML:\n<!-- JS file to enable the JavaScript API. You can point at the\n  version on public.tableau.com, online.tableau.com, or your on-prem Server -->\n<script src=\"https://www.example.com/javascripts/api/tableau-2.js\"></script>\n...\n<!-- Empty div where the viz will be placed -->\n<div id=\"tableauViz\"></div>\nJavaScript:","use-cases-for-the-javascript-api-and-the-embedding-api-v3#Use cases for the JavaScript API and the Embedding API v3":"The JavaScript API v2 and the Embedding API v3 provide access to a large set of capabilities that allow for granular control of interactivity with embedded views, as well as the customization needed to create a seamless analytics experience within custom apps. Common use cases include:Filtering and setting parameters on load -- The options object gives you a clean interface for filtering the visualization as it loads. This is useful for loading the viz with the correct context given where the user is in your application or choices they have made.\nNote: Filtering with the JavaScript API v2 or Embedding API v3 is not a security mechanism. If you wish to have tamper-proof filters applied, you should use user filters or database security.Custom interfaces for interacting with the view -- Dashboards often have elements for filtering, changing parameters, and switching tabs, amongst other things. When integrating with another application, you may want to match the look and feel of dashboard interfaces with the look and feel of the embedding application. For example, you can create a drop-down with HTML/CSS/JS that matches the style of your application and have that drop-down make JavaScript API calls to filter the viz or change a parameter.Custom interactions -- Because the JavaScript API gives you programmatic control over interaction, you can combine calls to create interactions that would not be possible otherwise. For example, you could create a button that switches to a specific visualization, changes a parameter, and then selects a set of marks all with a single click by the user. Or, when a user clicks a mark on a viz, you could have that drive a parameter change on another sheet. The combination of API calls is limited only by your imagination.Integration with other systems -- If a user finds an insight from a visualization, it is likely the user will want to take action on that insight elsewhere in the embedding application. With the JavaScript API v2 and Embedding API v3, you can query data from the visualization, listen to user events, and execute code to perform an appropriate action. This allows Tableau visual analytics to integrate within your application's workflows.In the image below, an HR-focused dashboard allows the user to select employees for an audit. When the user is ready, he or she can click \"Run Audit\" to generate a non-Tableau audit based on the selections made inside the Tableau viz.","embedding-api-and-javascript-api-resources#Embedding API and JavaScript API Resources":"Link\tDescription\tEmbedding API v3 Documentaion\tOfficial documentation for the Embedding API v3, including overview, key concepts, and API reference\tTableau Developer Program\tJoin the Tableau Developer Program and keep up to date with the latest news and previews of developer tools and APIs\tJavaScript API v2 Documentation\tOfficial documentation for the JavaScript API including an overview, tutorial, samples, explanation of key concepts, and API reference\tJavaScript API Tutorial\tAn interactive tutorial that will walk you through the key concepts of the JavaScript API\tJavaScript API YouTube Playlist\tA series of youtube videos to get you up and running with the JavaScript API\tJavaScript API Samples\tOfficial samples, created and maintained by Tableau\t\nNext section: Authentication and Single Sign-On"}},"/frontend/non_views":{"title":"Embedding Analytics Experiences","data":{"":"Almost all embedded deployments of Tableau embed pre-built dashboards. But some embed other components of Tableau such as:\nweb authoring experience\nThe Tableau Server UI (embedded for integration and single sign-on reasons). (Note that Tableau does not offer support for this deployment).\nThe easiest and best way to include web authoring in your embedding scenario is to use the Tableau Embedding API v3. The Tableau Embedding API v3 provides a web component, <tableau-viz-authoring>, which in just a few lines of HTML code, allows users to author the view in your web application (if permissions allow). You can also use the Embedding API v3 to call JavaScript methods that let you to customize the authoring lifecycle. For example, you can dynamically configure and switch between the authoring or viewing experience.","embedding-web-authoring#Embedding Web Authoring":"Web authoring allows someone to edit a visualization just as they would in Tableau Desktop.\nEmbedding a view with web authoring gives your users the ability to modify and update a view, all while staying in their workflow. Embedded web authoring means that you can create comprehensive embedded applications for your customers that include options for self-servicing.When it comes to editing a visualization, it is often acceptable to simply use the default settings and allow the user to click Edit on the toolbar of an embedded dashboard. The result will be a new browser tab opened to the web authoring screen for that workbook. However, now you can embed the Tableau authoring experience directly in the application. There's no need to have users jump to another window or tab. You can use the Edit button in the toolbar, or create your own edit button that matches the look and feel of your application. To do that:\nAdd a <tableau-authoring-viz> element to your HTML code or use the Embedding API v3 JavaScript methods to create a TableauAuthoringViz object. Set the src attribute or property to the URL of the viz. Then link to, or import, the Embedding API v3 library.\n<tableau-authoring-viz id=\"AuthoringViz\"       \n  src='https://my-server/authoring/my-workbook/my-view'>\n </tableau-authoring-viz>","create-a-custom-editing-workflow#Create a custom editing workflow":"To create your own editing workflows, you can hide the default Edit, Close, and Edit in Desktop buttons on the toolbar, by setting attributes on the <tableau-authoring-viz> and <tableau-viz> web components, or by setting those properties on the JavaScript objects. And then create your own custom buttons in your application and switch between authoring and viewing.You could also change a setting to suppress the default actions that occur when the Close, Edit, or Edit in Desktop buttons in the toolbar are clicked. You can then setup event listeners (for example, EditButtonClick, or PublishedAs) to handle the button clicks and customize the authoring and publishing flow to suit the needs of your users. For example, you might follow this scenario to switch between viewing and web authoring modes.\nCreate a <tableau-viz> component (or TableauViz object), set the suppress-default-edit-behavior attribute to turn off the default actions that occur when the user clicks the Edit button, or closes, or publishes the view.\nIn the <tableau-viz> component, set the src URL and then add the onEditButtonClicked event listener to call your custom handler (handleEditButtonClicked()) when the user wants to switch to edit mode.\n <tableau-viz\n  id=\"viewingViz\"\n  src=\"https://myserver/t/site/workbook/sheet\"\n  width=\"800\" height=\"600\"\n  suppress-default-edit-behavior\n  onEditButtonClicked=\"handleEditButtonClicked\">\n </tableau-viz>\nCreate a <tableau-authoring-viz> component or TableauAuthoringViz object, but don't specify the src URL to the view, so that the view doesn't appear until after the Edit button is clicked. You can also set the HTML style properties to hide the component or <div> that will contain the authoring view.\nIn your custom handleEditButtonClicked() method, you should assign the src URL to the TableauAuthoringViz object so that when it is rendered it shows the view. You should also set the style properties to show the authoring component and to hide the TableauViz object.\nIn the <tableau-authoring-viz> component, add the onWorkbookPublishedAs event attribute or property to be able to get the new URL for the saved workbook. In your custom handler for the published-as event, assign the new URL to the TableauViz object.\nIn the <tableau-authoring-viz> component, add the onWorkbookReadyToClose event attribute to know when to switch back to view mode. In your custom event handler for the close event, hide the authoring component from view and show the viewing component.\nFor an overview of the embedded web authoring feature, see How to Enable Self-Service Analytics in Your Application with Embedded Web Authoring. For a hands-on tutorial, see Embedded API - Web Authoring Tutorial. And for more information, see Embedded Web Authoring in the Embedding API v3 Help documentation.Additional Considerations:\nYou will likely want to allow your users to save their edits, but not have their personalized versions affect other users. In that case, you should turn off save permissions, but allow save-as permissions. It also makes sense to give each of the users a 'sandbox' project that only they can save to.\nTo give your user access to personalized content that they create, your application will have to be dynamic to show users all content they have access to, not just those you create. See the page on [Using the REST API to display dynamic content]({{ site.baseurl }}/pages/03_server_management_and_restapi).\nIf you are using Connected Apps for embedding views, be sure to set the scope (scp) claim in the JSON Web Token (JWT) to include both web authoring (tableau:views:embed_authoring) and embedded viewing (tableau:views:embed). For information about Connected Apps, see Authentication and Single Sign-On (SSO) and Configure Tableau Connected Apps to Enable SSO for Embedded Content.","embedding-other-tableau-server-pages#Embedding other Tableau Server pages":"You can also use the iframe approach to embed the Tableau Server UI. This is a rarer technique, but is useful if you want to use the out-of-the-box UI, but want to achieve single sign-on from your application.To do so, simply embed http://{server}/trusted/{ticket}/t/{site}/ into an iframe. Be sure to enable unrestricted tickets."}},"/frontend/other_apps":{"title":"Embedding in SharePoint, Salesforce, and Mobile Apps","data":{"":"Much of this playbook focuses on embedding Tableau content in custom-developed web applications, but there are three common embedding scenarios that have specific requirements: SharePoint, Salesforce, and Mobile Apps.","embedding-in-sharepoint#Embedding in SharePoint":"Tableau provides a SharePoint Web Part to facilitate SharePoint embedding scenarios.The Web Part, as well as the instructions for installing it are located under C:\\Program Files\\Tableau\\Tableau Server\\<version>\\extras\\embedding\\sharepoint within your Tableau Server install directory.\nUsing the Web Part is optional if Enable Automatic Logon option (e.g. Microsoft SSPI) is enabled for Active Directory during the Tableau Server install and configuration. In this case, simply using the built-in SharePoint Page Viewer will suffice. All you need to do is [paste the Embed Code]({{ site.baseurl }}/pages/01_embedding_and_jsapi) into the Content Editor.\nThe Tableau-supplied Web Part becomes necessary when using [Trusted Ticket authentication]({{ site.baseurl }}/pages/02_auth_and_sso) to achieve Single Sign-On.You can embed Tableau Online views into SharePoint as well, but neither Active Directory nor Trusted Tickets are supported for Online.See also\nDocumentation for embedding in SharePoint with Active Directory\nDocumentation for embedding in SharePoint with Local Authentication","embedding-into-salesforce-lightning#Embedding into Salesforce Lightning":"Tableau provides a free Salesforce Lightning web component that facilitates embedding scenarios. The latest version of the Tableau Viz Lightning web component is available from the AppExchangeThe Tableau Viz Lightning web component makes it easy to Embed Tableau views into Salesforce Lightning pages. To install the Tableau Viz Lightning web component in your Salesforce org you just need to be a Salesforce Administrator. After it’s installed, you can just drag and drop the Tableau component on any Salesforce page and set the URL to any view on Tableau Server, Tableau Online, or Tableau Public.The Tableau Viz Lightning web component lets you quickly filter views based on the Lightning page you embed them in. You can also select filters based upon Tableau and Salesforce fields.Based on the Salesforce Lightning Web Component framework and the Tableau JavaScript API for embedding, developers can extend and customize the open-source Tableau Viz Lightning web component project on GitHub. For more information, see Tableau Viz Lightning Web Component and the Tableau Viz LWC Samples.The Tableau Viz Lightning web component does not support Salesforce Classic. For information about using the Salesforce Canvas adapter, see the following Knowledge Base article, Tableau Viz Lightning Web Component Does Not Work On Salesforce Classic.For convenience, you can configure Tableau to use Single Sign-On (SSO) with Salesforce. The Tableau Viz Lightning web component only supports SAML as the SSO method. The SAML IdP used for Tableau authentication must be either the Salesforce IdP or the same IdP that is used for your Salesforce instance. Configuring Tableau Server or Tableau Online requires Tableau administrator permissions.\nFor information about setting up SSO with Tableau Online, see Configure SAML with Salesforce and Configure SAML for Tableau Viz Lightning Web Component.\nFor information about setting up SSO with Tableau Server, see Configure SAML for Tableau Viz Lightning Web Component.\nLearn more about the Tableau Viz Lightning web component by completing the Embed Tableau Visualizations in Salesforce Trailhead project.","embedding-into-mobile-apps#Embedding into Mobile Apps":"Tableau Server and Online users can access their Tableau content via Tableau-released mobile applications, but it is often desirable to create custom mobile apps the embed Tableau content or to embed Tableau content into existing mobile apps.\nTo aid in that scenario, Tableau has released an open-source sample called the Mobile App Bootstrap. The samples demonstrates how co connect and stay signed into a Tableau Server, embed Tableau content and interact with it using JavaScript API. They are good resources to use as a starting point for mobile application development or as samples to learn from.The Mobile App Bootstrap comes in two flavors:\nObjective-C -- If your app development is done in Objective-C and/or Swift, this template will help you embed Tableau content.\nHTML/CSS/JS/Cordova -- Cordova is an engine that allows you to develop cross-device mobile applications in HTML/CSS/JS. If you are not already an ObjC/Swift shop, the Cordova template for embedding in mobile applications is a good choice.\nIn addition, Tableau has released the Mobile Connected Client Plugin which can accompany the Mobile App Bootstrap, or any app that embeds Tableau content, to handle authentication so that your users do not have to continually sign in to Tableau Server."}},"/":{"title":"Tableau Embedded Analytics Playbook","data":{"":"Embedding Tableau content allows you to add the power of interactive visualization to external applications. Common use cases of embedding are:\nTableau dashboards as components of line-of-business or vertical applications\nEmbedding into internal knowledge bases and CRM systems\nAdding interactive visualizations to blog posts\nEmbedding into custom mobile applications\nThe act of embedding a single dashboard or visualization into a single webpage is quite simple, but a well-engineered integration requires handling other things such as authentication, authorization, content management, and performance. Depending on your integration goals, you may require the use of a variety of features and techniques.The following list provides a summary of the key APIs and features that are used in embedded deployments. The rest of the playbook will then dive into the key embedding requirements, explain how to accomplish those requirements, and supply you with resources necessary to get up and running.","key-features-and-apis#Key features and APIs":"Embedding API v3 - The Embedding API v3 provides an updated developer experience and enhancements over the JavaScript API v2. The Embedding API v3 provides web components for embedding Tableau visualizations and is available starting with Tableau version 2021.4.REST API - Allows for integration between an embedding application and Tableau Server or Tableau Online by way of RESTful endpoints that manage users, content, and permissions amongst many other capabilities provided by the Tableau platform. Common use-cases include integrating user management in Tableau with user management in the embedding application, managing content and permissions according to the state of the embedding application, querying Tableau metadata so the correct information is displayed to end-users, and automating the management of Tableau Server.Connected Apps - Enables a seamless and secure authentication experience by facilitating an explicit trust relationship between Tableau Online or Tableau Server and external applications where Tableau content is embedded. The trust relationship is established and verified through an authentication token in the JSON Web Token (JWT) standard, which uses a shared secret provided by the Tableau connected app and signed by your external application.NOTE: Connected Apps is available for both Tableau Server and Tableau Online using the Embedding API v3.External Authorization Servers (EAS) - Establishes a trust relationship between Tableau Server and the EAS. By establishing a trust relationship, you’re able to provide your users a single sign-on (SSO) experience to Tableau content embedded in your external applications through the identity provider (IdP) you’ve already configured for Tableau Server. When embedded Tableau content is loaded in your custom application, a standard OAuth flow is used. After users successfully sign in to the IdP, they are then automatically signed in to Tableau Server. To register an EAS with Tableau Server, you must have an EAS already configured. In addition, the EAS must send a valid JSON web token (JWT).NOTE: EAS is only available for Tableau Server and the Embedding API v3.SAML, OpenID, Active Directory, Kerberos - For environments that already use one of these systems, they can be leveraged to achieve Single Sign-On (and to leverage database security in the case of Kerberos).Tableau Viz Lightning web component - Makes it easy to Embed Tableau views into Salesforce Lightning pages. The Tableau Viz Lightning web component is available from the Salesforce AppExchange. To embed a view, you simply drag and drop the Tableau Viz Lightning web component onto the page and then provide the URL for the Tableau view. You can embed Tableau views from Tableau Server, Tableau Online, or Tableau Public.Mobile App Bootstrap - Samples/Templates for embedding in mobile apps. A great way to get up and running if you have mobile apps and want to include Tableau content or if you want a customized mobile experience for Tableau.Document API - API for updating data source connection information. Allows you to build content once (i.e. templates) in the scenario that you have many, structurally similar, databases for multi-tenancy or dev/test/prod scenarios.User Filtering - Functionality for securely filtering a workbook based on the Tableau Server or Online login information. In multi-tenant scenarios, if you have a single database for multiple users or clients, you can use user filters to have the same content apply to the different clients, ensuring each user can only see the rows that he or she has access to."}},"/security/auth":{"title":"Authentication and Single Sign-On (SSO)","data":{"":"In most embedding scenarios, you will want to enable single sign-on so that the users that are signed in to your application do not have to also sign into Tableau Server or Tableau Online. There are various options to enable single sign-on (SSO) to Tableau.Note: This page discusses users logging into Tableau Server and  Tableau Online. Related, but separate, is the issue of [user management]({{ site.baseurl }}/pages/03_server_management_and_restapi) in which you ensure all relevant users are registered and provisioned with Tableau.The guidance for which single sign-on option to use is:\nConnected Apps: Use Connected Apps if you want to facilitate an explicit trust relationship between Tableau Online or Tableau Server and external applications where Tableau content is embedded. The trust relationship is established and verified through an authentication token in the JSON Web Token (JWT) standard.\nExternal Authorization Servers (EAS): Use EAS if you prefer to establish a trust relationship between Tableau Server and an identity provider you've already configured for Tableau Server. A standard OAuth flow is used to provide your users a single sign-on experience to Tableau content embedded in your external applications.\nTrusted Authentication: Use Trusted Authentication if you wish to establish trust between Tableau Server and one or more web servers using an IP allowlist. Until the release of Connected Apps and EAS, Trusted Authentication was the most commonly implemented single sign-on solution. If advanced JavaScript API v2 capabilities are required, Trusted Authentication will still be the best fit.\nActive Directory + Kerberos: If all of your users are registered in your Active Directory instance and you already use Kerberos for authentication for other applications, use Active Directory + Kerberos.\nActive Directory + 'Enable automatic logon': If all of your users are registered in your Active Directory instance, but you do not use Kerberos, use Active Directory with the 'Enable automatic logon' option (which uses Microsoft SSPI).\nSAML or OpenID: If you have already use SAML or OpenID in your systems, configure Tableau Server to use your existing SAML or OpenID deployment.","connected-apps-and-external-authorization-servers-eas#Connected Apps and External Authorization Servers (EAS)":"With Connected Apps (CA) and External Authorization Server (EAS), you have two modern options to implement seamless SSO authentication for embedded Tableau views. You can either setup a trust relationship between Tableau Server, or Tableau Online, and your external application (CA) using an authentication token in the JWT standard. Or you can establish a trust relationship between Tableau Server and an identity provider (EAS) to implement a standard OAuth flow. Both options provide additional security and control scopes over Trusted Authentication. To leverage either of these methods, you must use Tableau 2021.4 (or later) and the Embedding API v3 to embed your views.","connected-apps#Connected Apps":"For information about using connected apps for embedding views from Tableau Online, see Configure Tableau Connected Apps to Enable SSO for Embedded Content. For information about setting up a connected app on Tableau Server or Tableau Online using the Tableau REST API, see the Connected App Methods.Here is a short summary of the steps you need to take. There are four parts to enabling your embedded view as a connected app.\nAs a Tableau site administrator, login in to Tableau Online and create a new connected app. Or for Tableau Server or Tableau Online, use the REST API connected apps methods to create a new connected app). Make note of the client ID, as you will need this to create the JWT.\nGenerate the secret(s) for the connected app. Make note of this secret ID and secret value as you will need these when you create the JWT.\nConfigure the web server that hosts your embedded application to generate the (JWT). The JWT is generated dynamically for each user. There are JWT libraries and packages in various languages that you can use to build the JWT.\nAfter you have the JWT, you need to pass this value to the Tableau viz web component <tableauViz>. Once configured, users can securely view embedded content in your application without going through login screens.","external-authorization-servers#External Authorization Servers":"If you are using an IdP on Tableau Server to authenticate users, you can use an external authorization server (EAS). The EAS must be set up to provide a JSON web token (JWT) for each user. You use the JWT when you embed the Tableau view as a web component in your application. When the embedded content is loaded, the standard OAuth flow is used. After users sign in to the IdP, they are automatically signed in to Tableau Server. For information, see Register EAS to Enable SSO for Embedded Content (Linux) or Register EAS to Enable SSO for Embedded Content (Windows).","add-the-jwt-to-the-tableau-viz-component#Add the JWT to the Tableau viz component":"Whether you are configuring your embedded web application to use EAS for Tableau Server, or as a connected app on Tableau Online or Tableau Server, you need to explicitly pass the JWT that is generated by the EAS or by your web server to the <tableauViz> web component.  You do this using the token attribute.For example, if you programmatically build the JWT for each user and assign it to a variable JWT, you might use a template literal to reference the JWT on your HTML page.\n<tableau-viz id=\"tableauViz\"\n  src='https://your-tableau-server/views/my-workbook/my-view'\n  token=\"${JWT}\">\n</tableau-viz>","trusted-authentication#Trusted Authentication":"Trusted authentication is a piece of functionality specific to Tableau Server. It allows you to trust specific machines to authenticate users on their behalf. Because the authentication happens with simple HTTP requests, it is a versatile single sign-on option and can be used to integrate with, essentially, all other authentication systems or web auth flows.The Trusted Authentication documentation is a good resource for getting up and running, but below is a summary of the three steps in the trusted authentication workflow:\nConfiguration: This is a one-time step where you configure Tableau Server to 'trust' specific IP addresses, which will then be allowed to authenticate users. The machines to trust are usually the machines running your web application. [Details]\nPOST Request: When the user navigates to a page in your web application that contains Tableau content, the web application will make a server-side POST request to Tableau Server passing in the users's Tableau Server username, the site the content exists on, and, optionally, the client's IP address in the form data. If the IP address making the request is trusted, and the user exists in Tableau Server, Tableau Server will return a ticket. [Details]\nClient loads the view with the ticket: Your web application now instructs the client to load the url of the desired resource, with the ticket inserted. If the ticket is valid, Tableau Server will start a session for the user and the user will see the visualization. Of course, the user does not see the HTTP requests going on behind the scenes, but simply loads a page in your application and sees embedded Tableau content without having to signin. [Details]\nAdditional considerations:\nA common desire is to use a single 'service' account to authenticate the users. This is not a recommended approach, because it does not allow you to apply [data security]({{ site.baseurl }}/pages/04_multitenancy_and_rls) or to track usage on a per-user basis.\nThe trusted ticket is redeemable only once within three minutes of being issued and establishes a Tableau Server session for the user. The session allows the user to access any of the views that they have access to, as determined by the user and content permissions on the server. For more information, see Trusted Authentication.\nBy default, tickets can be redeemed only for embedded visualizations, and not for other content pages in Tableau Server. To enable the user to see those, you must configure unrestricted tickets. See also: the [embedding non-view content]({{ site.baseurl }}/pages/06_embedding_non_view_content) page in this playbook.\nIf your web application has dynamic IP addresses, such that it is not feasible to trust a specific set of static IP addresses, you have a couple of options. You could create a small 'ticket requester' application that only allows requests from your web application. The 'ticket requester' requests tickets from the server, and then returns them to your web application. You can then deploy this 'ticket requester' application to a static IP address. Or you could consider leveraging one of the other authentication mechanisms listed above that do not depend on an IP allowlist.","kerberos-active-directory-saml-and-openid#Kerberos, Active Directory, SAML, and OpenID":"To use Kerberos for SSO, you must first configure Tableau Server to Use Active Directory and then configure Tableau Server to use Kerberos\nTo use SSPI for single sign-on, check the 'Enable automatic logon' option when configuring Tableau Server to Use Active Directory\nConfiguring Tableau Server for Server-wide SAML\nAlternatively, if each of your clients will have their own SAML iDP, you will need to configure Tableau Server for site-specific SAML\nConfigure Tableau Server for OpenID"}},"/security/rls":{"title":"Row-level Security","data":{"":"Scaling an embedded analytics deployment of Tableau often means providing content to different groups of users. There is a security implication of making sure the different groups do not see each others' data (and metadata). There is also a deployment and maintenance consideration: Common dashboards should have to be built only once, even if the different groups of users access different data with those common dashboards.","multi-tenancy-sites--projects#Multi-tenancy, Sites, & Projects":"The two key tools for defining which users can see which workbooks and datasources are Projects and Sites.\nSites act as a logical firewall. If you create a site for each client or company that will access your Tableau content, you can be assured that users on one site will not learn about users or access content on another site.\nProjects (combined with Permissions) allow you to define which users inside the site can access which pieces of content. Permissions can be set at a granular level so that you can give different levels of permission to different users or groups.\nIf you have a multi-tenant deployment of Tableau Server, you should have one site per tenant. This is the only bullet-proof method of assuring different tenants do not learn about each other or see each others' data. Projects should be used in addition to sites to give access to different groups inside of a company.","row-level-security#Row-level Security":"Row-level Security is both a security and content management concern. The simplest way to make sure users only see their data is to manually build a dashboard for each of them. This is not scalable, so Tableau provides a variety of ways to build a single dashboard that is filtered to the correct data. The correct method to use depends on your data environment.Here is some guidance (details for each of the methods are below):\nIf you have a separate database for each tenant, build a template dashboard and use the Document API to clone the dashboard for each tenant.\nIf your tenants share a database and there is filtering/entitlement logic to separate who should see which row, use user filters.\nUse Initial SQL + in-database security if you already have in-database security set up and plan on using live connections to the database","template-dashboard--document-api#Template Dashboard + Document API":"The Document API is a Python API for modifying and querying Tableau content files (TWB/TWBX, TDS/TDSX). If your data environment is such that each tenant has their own database (and they are each structurally similar), then you can use the Document API to create a single workbook for each of your tenants. The workflow is:First, build a 'template' workbook that points at a single database. Build the necessary visualizations and dashboards.\nThen, create a script that:\nFor each tenant, uses the Document API to change the database connection information, and save a copy. Sample Script\nUses the [REST API (or Server Client Library)]({{ site.baseurl }}/pages/03_server_management_and_restapi)  to publish each tenant's workbook to Server.\nThe above is all that is necessary if your workbooks have 'embedded datasources' (the datasources haven't been published separately). If you do choose to publish the datasources to take advantage of Tableau Server's Data Server, the Document API will still work. You will just have to apply the above workflow first to the datasource(s) and then to the workbooks:First, build a 'template' datasource, publish it, and build a 'template' workbook that points at the published datasource.\nThen, create a script that:\nFor each tenant, uses the Document API to change the database connection information in the TDS (datasource file), and save a copy.\nUses the [REST API (or Server Client Library)]({{ site.baseurl }}/pages/03_server_management_and_restapi) to publish each tenant's datasource to Server. The datasource will now have a connection string that you can use in the workbooks...\nFor each tenant, for each workbook, uses the Document API to change the published datasource connection information, and save a copy.\nUses the [REST API (or Server Client Library)]({{ site.baseurl }}/pages/03_server_management_and_restapi) to publish each all of the workbooks to Server.","user-filters#User Filters":"If your tenants 'share' a database server, and there is logic in the database that determines which users can see which rows, you can build your datasources and workbooks using 'User Filters' which is a way to filter based on which user is currently logged in to Tableau Server.Essentially, when connecting to your data in Tableau Desktop you will JOIN the tables containing the data necessary for analysis to the entitlements table so that each row has a column ([Owner] in the below example) specifying which Tableau Server user it belongs to. Then you can create a calculation username() = [Owner] and filter to True.See also\nLink\tDescription\tSetting Up User Filters\tKnowledge base article on setting up user filters using the username() method\tSecuring User Filters\tKnowledge base article on creating your user filters at the data source level so that they are tamper-proof\tDatabase Entitlements Strategy\tBlog post on database structure for row-level security\tExtract-size strategies for RLS\tBlog post detailing strategies for managing size of Extracts if your entitlements logic requires many one-to-many JOINs","in-database-security-and-initial-sql#In-database Security and Initial SQL":"If your database has existing security, such that setting the user to run the queries as will return the correct rows for that user, you can leverage that security with Initial SQL. Because this Initial SQL command will only run when queries are sent from Tableau to the database, this option only works for live connections to the database.To use Initial SQL: When connecting to your datasource in Tableau Desktop, click \"Initial SQL\". Type the correct command that will set all following queries to run as the logged-in user. For example, in Microsoft SQL Server, you might run:\nEXECUTE AS USER = [TableauServerUser] WITH NO REVERT;\nAnd now build your workbook normally. All sessions with the database will begin by running the Initial SQL that you specified.See also\nLink\tDescription\tSetting Up Initial SQL\tKnowledge base article on using setting up and using Initial SQL\tPreparing your DB for Initial SQL Security\tBlog post to help you ensure the database is ready to use Initial SQL for row-level security"}}}